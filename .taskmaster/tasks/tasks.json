{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Create Basic HTML Structure and Project Files",
        "description": "Set up the fundamental project structure with comprehensive Stable Diffusion WebUI design system implementation",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Create index.html with two-panel layout: left panel (600px) for controls and right panel for output using flexbox. Include form elements for API URL input, file upload, parameter controls (steps, CFG, width, height, batch size, positive prompt), generate button, and results display area. Implement complete CSS design system with dark theme (#0b0f19 background, #181825 panels), orange gradient generate button (#ff7c00), blue accents (#1f77b4), Helvetica Neue typography, and styled components (sliders, inputs, buttons). Include responsive behavior and interactive states. Create script.js for application logic with semantic HTML structure and proper form validation.",
        "testStrategy": "Verify HTML renders correctly with proper two-panel layout, all form elements are accessible and styled according to design specifications, responsive behavior works across different screen sizes, hover/focus states function properly, and file structure is organized",
        "subtasks": [
          {
            "id": 1,
            "title": "Create HTML structure with two-panel flex layout",
            "description": "Build index.html with left panel (600px) for controls and right panel for output using flexbox layout",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement comprehensive CSS design system",
            "description": "Create style.css with complete design system: dark theme colors (#0b0f19, #181825), Helvetica Neue typography, component styling for all form elements",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Style generate button with orange gradient",
            "description": "Implement #ff7c00 orange gradient generate button with hover states and proper typography",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create styled form controls",
            "description": "Style sliders, inputs, dropdowns, and other form elements with blue accents (#1f77b4) and consistent design language",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement responsive behavior and interactive states",
            "description": "Add responsive layout adjustments, hover/focus states, and ensure design system works across different screen sizes",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Create script.js foundation",
            "description": "Set up basic JavaScript file structure for application logic with proper form validation framework",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement API Connection Management with Design System UI",
        "description": "Build functionality to configure and test ComfyUI API endpoint connection using Stable Diffusion WebUI design patterns",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Create functions to handle API URL configuration with default value 'http://localhost:8188', implement connection testing via fetch API, add visual status indicators (connected/disconnected) using blue accent colors (#1f77b4) for connected state and red for disconnected. Store endpoint in localStorage for persistence. Style the API configuration panel with dark theme (#181825 panel background), use Helvetica Neue typography, and implement hover/focus states consistent with design system. Include error handling for network failures and invalid URLs with styled error messages.",
        "testStrategy": "Test connection with valid ComfyUI instance, verify localStorage persistence, test with invalid URLs and offline scenarios, validate design consistency with WebUI components",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Build JSON Workflow Upload and Validation with Styled Components",
        "description": "Implement file upload functionality with JSON parsing and validation using design system styling",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Create styled file upload handler that accepts only .json files, implement JSON.parse() with try-catch error handling, validate basic JSON structure. Style upload area with dark theme (#1f2937 input background), use blue accent colors for interactive elements, implement drag-and-drop styling with hover states. Display upload status and filename with proper typography (Helvetica Neue), show clear error messages using design system error styling. Store parsed workflow data in memory for modification.",
        "testStrategy": "Test with valid ComfyUI workflow JSON files, test with invalid JSON, test with non-JSON files, verify error messages are clear and follow design patterns, validate visual consistency",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Create Parameter Detection and Auto-Population with Styled Forms",
        "description": "Parse uploaded JSON to detect and populate current parameter values using design system form components",
        "status": "done",
        "dependencies": [
          3
        ],
        "priority": "medium",
        "details": "Implement functions to traverse workflow JSON and find KSampler nodes (for steps, cfg), EmptyLatentImage nodes (for width, height, batch_size), and CLIPTextEncode nodes (for positive prompt). Auto-populate styled form fields with detected values or use defaults. Style input fields with dark theme (#1f2937 background), blue accent focus states, proper Helvetica Neue typography, and consistent hover effects. Handle cases where target nodes are not found with styled feedback messages.",
        "testStrategy": "Test with various ComfyUI workflow files, verify parameter detection accuracy, test with workflows missing expected node types, validate form styling consistency",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement JSON Workflow Modification Engine",
        "description": "Build the core functionality to modify workflow parameters in the JSON structure",
        "status": "done",
        "dependencies": [
          4
        ],
        "priority": "high",
        "details": "Create parseAndModifyWorkflow() function that updates KSampler nodes with user-provided steps and cfg values, updates EmptyLatentImage nodes with width, height, and batch_size, updates first CLIPTextEncode node with positive prompt text. Preserve all other workflow data unchanged. Handle edge cases where multiple nodes of the same type exist. This engine focuses on data manipulation and doesn't require UI styling changes.",
        "testStrategy": "Verify parameter modifications are applied correctly, test with complex workflows, ensure unmodified parts remain intact",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Build ComfyUI API Communication Layer with Loading States",
        "description": "Implement functions to submit workflows and retrieve results from ComfyUI API with styled loading indicators",
        "status": "done",
        "dependencies": [
          2,
          5
        ],
        "priority": "high",
        "details": "Create submitToComfyUI() function using POST /prompt endpoint, implement pollForResults() using GET /history/{prompt_id}, handle API response parsing, manage prompt IDs for tracking. Implement styled loading states during API calls using design system patterns - dark backgrounds, blue accent spinners, proper typography for status messages. Add comprehensive error handling for API failures with styled error messages matching the WebUI design patterns.",
        "testStrategy": "Test workflow submission with valid ComfyUI instance, verify prompt ID tracking, test error handling with API failures, validate loading state styling consistency",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Image Retrieval and Display System with Design Consistency",
        "description": "Build functionality to fetch and display generated images from ComfyUI using styled image galleries",
        "status": "done",
        "dependencies": [
          6
        ],
        "priority": "medium",
        "details": "Create displayImages() function that retrieves images via GET /view endpoint, handle multiple images based on batch size. Create styled dynamic img elements in results area with dark theme panel backgrounds (#181825), implement blue accent borders for selected/hover states, add proper spacing and typography. Implement styled image loading states with design system spinners, handle image fetch errors gracefully with consistent error styling.",
        "testStrategy": "Test image display with various batch sizes, verify image loading and error states, test with different image formats, validate visual consistency with design system",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Add Image Download and Results Management with Styled Controls",
        "description": "Implement download functionality and results clearing options using design system button styles",
        "status": "done",
        "dependencies": [
          7
        ],
        "priority": "medium",
        "details": "Add styled download buttons for each generated image using orange gradient primary button styling, implement blob URLs and anchor download attributes. Create styled clearResults() function button with secondary styling, manage memory cleanup for blob URLs. Add batch download option with consistent button styling if multiple images exist. All buttons should follow design system patterns with proper hover states, Helvetica Neue typography, and consistent spacing.",
        "testStrategy": "Test individual image downloads, verify results clearing functionality, test memory management with multiple generations, validate button styling consistency",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement User Interface State Management with Design System Feedback",
        "description": "Add loading indicators, progress states, and user feedback throughout the workflow using consistent styling",
        "status": "done",
        "dependencies": [
          6,
          7
        ],
        "priority": "medium",
        "details": "Add styled loading spinners during API calls using blue accent colors, disable generate button during processing with proper disabled state styling. Show generation progress if available from API using styled progress bars with design system colors. Implement comprehensive user feedback for all operations (upload success, parameter changes, generation start/complete) using consistent toast/notification styling with dark backgrounds and proper typography. Add visual states for different application phases maintaining design consistency.",
        "testStrategy": "Test all loading states and user feedback, verify UI remains responsive during operations, test progress indicators with actual generations, validate all feedback styling matches design system",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Add Comprehensive Error Handling and Validation with Styled Messages",
        "description": "Implement robust error handling across all application features with design system consistent error styling",
        "status": "done",
        "dependencies": [
          8,
          9
        ],
        "priority": "high",
        "details": "Add styled input validation for all parameter fields (steps 1-150, CFG 1-30, dimensions 64-2048 in increments of 8, batch size 1-10) with consistent error styling using red accent colors and proper typography. Implement comprehensive error handling for API failures, JSON parsing errors, network issues, and missing workflow nodes. Display clear, actionable error messages to users using design system error message components with dark backgrounds, proper spacing, and Helvetica Neue font. Ensure all error states maintain visual consistency with the overall design.",
        "testStrategy": "Test all validation rules, verify error handling for all failure scenarios, ensure error messages are user-friendly and actionable, validate all error styling matches design system patterns",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement WebSocket Connection Manager for Real-time Updates",
        "description": "Create a WebSocket connection manager to handle real-time communication with ComfyUI for progress tracking and queue management",
        "details": "Create a WebSocket service class that connects to ComfyUI's WebSocket endpoint. Implement connection management with automatic reconnection, error handling, and event parsing. Parse 'executing', 'progress', and 'executed' events from ComfyUI. Include connection state management (connecting, connected, disconnected, error) and emit typed events for UI components to consume. Handle WebSocket lifecycle: connect on app start, reconnect on failures, clean disconnect on app close.",
        "testStrategy": "Unit tests for WebSocket service connection handling, event parsing, and reconnection logic. Integration tests with mock ComfyUI WebSocket server. E2E tests verifying real-time updates during actual generation workflow.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create WebSocket Service Class Architecture",
            "description": "Design and implement the core WebSocket service class with connection management and event handling capabilities",
            "dependencies": [],
            "details": "Create a WebSocketService class that encapsulates WebSocket connection logic to ComfyUI's endpoint (ws://localhost:8188/ws). Implement connection state enum (CONNECTING, CONNECTED, DISCONNECTED, ERROR). Add event emitter pattern for broadcasting WebSocket events to UI components. Create typed interfaces for ComfyUI WebSocket messages including 'executing', 'progress', 'executed', and 'error' events. Include connection configuration options such as URL, reconnect interval, and max retry attempts.",
            "status": "pending",
            "testStrategy": "Unit tests for WebSocket service initialization and configuration. Mock WebSocket connection tests for state transitions. Test event emitter subscription and unsubscription patterns. Verify proper TypeScript typing for all event interfaces."
          },
          {
            "id": 2,
            "title": "Implement Automatic Reconnection Logic",
            "description": "Build robust reconnection mechanism with exponential backoff and connection health monitoring",
            "dependencies": [
              1
            ],
            "details": "Implement exponential backoff algorithm for reconnection attempts (start at 1s, max 30s). Add connection health check with ping/pong frames or heartbeat mechanism. Create reconnection state management to track attempt count and backoff timing. Implement circuit breaker pattern to prevent infinite reconnection loops. Add connection quality indicators and emit reconnection events for UI feedback. Handle both unexpected disconnections and server-initiated closures differently.",
            "status": "pending",
            "testStrategy": "Unit tests for exponential backoff calculations and retry logic. Integration tests simulating connection drops and recovery. Test circuit breaker activation after max retries. Verify proper cleanup of timers and listeners during reconnection cycles."
          },
          {
            "id": 3,
            "title": "Parse and Handle ComfyUI WebSocket Events",
            "description": "Create event parsing system for ComfyUI-specific WebSocket messages with proper type safety",
            "dependencies": [
              1
            ],
            "details": "Implement message parser for ComfyUI WebSocket protocol including 'executing' (node execution start), 'progress' (generation progress updates), 'executed' (node completion), and 'execution_error' events. Create typed event handlers for each message type with proper payload validation. Add event buffering for messages received during reconnection. Implement error handling for malformed messages. Create event transformation layer to convert raw WebSocket data to application-friendly formats.",
            "status": "pending",
            "testStrategy": "Unit tests for parsing each ComfyUI event type with sample payloads. Test malformed message handling and validation. Integration tests with mock WebSocket server sending various event sequences. Verify event buffering during connection interruptions."
          },
          {
            "id": 4,
            "title": "Integrate WebSocket Lifecycle with Application",
            "description": "Connect WebSocket service to application lifecycle and implement proper resource management",
            "dependencies": [
              1,
              2
            ],
            "details": "Create WebSocket initialization on application mount/start with proper error handling. Implement clean disconnection on application unmount/close to prevent memory leaks. Add WebSocket connection status to global application state (Redux/Context). Create hooks or HOCs for components to subscribe to WebSocket events. Implement connection pooling if multiple WebSocket connections are needed. Add development mode features like connection debugging and event logging.",
            "status": "pending",
            "testStrategy": "Integration tests for application lifecycle hooks. Test memory leak prevention with mounting/unmounting cycles. Verify proper state updates in Redux/Context during connection changes. Test concurrent component subscriptions to WebSocket events."
          },
          {
            "id": 5,
            "title": "Build UI Components for Real-time Status Updates",
            "description": "Create React components that consume WebSocket events and display real-time generation status",
            "dependencies": [
              3,
              4
            ],
            "details": "Build ConnectionStatus component showing WebSocket connection state with visual indicators. Create ProgressTracker component that updates based on 'progress' events with percentage and ETA. Implement NodeExecutionStatus component showing currently executing nodes. Add event log component for debugging in development mode. Create toast notifications for connection status changes. Ensure all components properly unsubscribe from events on unmount.",
            "status": "pending",
            "testStrategy": "Component tests for each UI element with mocked WebSocket events. Test proper re-rendering on event updates. Verify component cleanup and event unsubscription. E2E tests with real ComfyUI WebSocket connection showing live updates during generation."
          }
        ]
      },
      {
        "id": 12,
        "title": "Create Real-time Progress Bar Component",
        "description": "Build an animated progress bar component that displays generation progress with live updates from WebSocket events",
        "details": "Create a React component with green progress bar styling using design system colors. Subscribe to WebSocket progress events and update UI state. Display current step, total steps, and percentage completion. Implement smooth CSS transitions for progress animations. Handle edge cases: rapid updates, completion states, error states. Style with dark theme consistency and proper typography. Show/hide based on generation state.",
        "testStrategy": "Component tests for progress calculation and display. Visual regression tests for progress bar animations. Integration tests with WebSocket service for live updates. Manual testing with various generation speeds and interruptions.",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Progress Bar Component Structure and Styling",
            "description": "Create the base React component with HTML structure and CSS styling following the dark theme design system",
            "dependencies": [],
            "details": "Create ProgressBar.js component with container div, progress bar track, and fill elements. Implement CSS with dark theme colors (#0b0f19 background, #181825 panel), green gradient for progress fill (#22c55e to #16a34a), smooth transitions (transition: width 0.3s ease-out), and proper typography (Helvetica Neue). Include states for hidden, active, completed, and error. Add responsive design considerations for mobile views.",
            "status": "pending",
            "testStrategy": "Visual regression tests for all progress states (0%, 50%, 100%, error). Test CSS transitions smoothness and gradient rendering. Verify dark theme consistency and responsive behavior at different breakpoints."
          },
          {
            "id": 2,
            "title": "Implement WebSocket Event Subscription and State Management",
            "description": "Connect progress bar to WebSocket service and manage progress state updates from generation events",
            "dependencies": [
              1
            ],
            "details": "Create useWebSocketProgress custom hook to subscribe to progress events. Handle 'execution_start', 'executing', 'progress', and 'execution_complete' event types. Parse WebSocket messages to extract current_node, max_nodes, and value fields. Implement state management for currentStep, totalSteps, percentage, isGenerating, and lastUpdate timestamp. Handle rapid update throttling to prevent UI jank. Clean up subscriptions on unmount.",
            "status": "pending",
            "testStrategy": "Unit tests for WebSocket message parsing and state calculations. Integration tests with mock WebSocket server sending various event sequences. Test rapid update handling and memory leak prevention."
          },
          {
            "id": 3,
            "title": "Build Progress Display UI with Step Counter and Percentage",
            "description": "Create the visual progress indicators showing current step, total steps, and percentage completion",
            "dependencies": [
              1,
              2
            ],
            "details": "Add progress text overlay showing 'Step X of Y (Z%)' format. Position text centered on progress bar with proper contrast (#ffffff text with subtle shadow). Implement number formatting for clean display (no decimals for percentage). Add loading shimmer effect during initial connection. Handle edge cases: 0 total steps, percentage > 100%, negative values. Include accessibility features with ARIA labels and live region announcements.",
            "status": "pending",
            "testStrategy": "Component tests for text formatting and positioning. Accessibility tests with screen readers for progress announcements. Visual tests for text readability on varying progress fill widths."
          },
          {
            "id": 4,
            "title": "Handle Progress Bar Visibility and Generation States",
            "description": "Implement show/hide logic based on generation state and handle various completion scenarios",
            "dependencies": [
              2,
              3
            ],
            "details": "Show progress bar only during active generation (fade in with opacity transition). Hide on completion with 1-second delay for user feedback. Handle error states with red color scheme (#ef4444) and error message display. Implement generation cancellation handling to reset progress. Add completion animation (pulse effect) before hiding. Store last generation stats for display after completion. Handle disconnection scenarios gracefully.",
            "status": "pending",
            "testStrategy": "Integration tests for visibility state transitions during generation lifecycle. Test error state styling and messaging. Manual testing of completion animations and timing. Test cancellation and disconnection scenarios."
          },
          {
            "id": 5,
            "title": "Optimize Performance and Handle Edge Cases",
            "description": "Implement performance optimizations and robust error handling for production reliability",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Implement requestAnimationFrame for smooth progress updates. Add debouncing for rapid WebSocket messages (16ms threshold). Handle browser tab visibility changes to pause/resume updates. Implement retry logic for WebSocket connection failures. Add progress bar memory to resume from last position on reconnect. Handle extremely long generations (>1000 steps) with appropriate scaling. Prevent progress bar overflow or negative values. Add performance monitoring for update frequency.",
            "status": "pending",
            "testStrategy": "Performance tests measuring frame rate during rapid updates. Stress tests with high-frequency WebSocket messages. Browser compatibility tests across Chrome, Firefox, Safari. Memory leak tests for long-running generations. Edge case testing with malformed WebSocket data."
          }
        ]
      },
      {
        "id": 13,
        "title": "Implement Queue Management with Cancel Button",
        "description": "Add cancellation control for active ComfyUI generations using the /interrupt endpoint",
        "details": "Create cancel button component with stop icon using design system red accent color. Integrate with ComfyUI /interrupt API endpoint. Implement button state management: hidden when idle, enabled during generation, loading state during cancellation. Add immediate UI feedback and error handling for failed cancellation attempts. Position button prominently near progress indicator. Include confirmation dialog for accidental cancellations.",
        "testStrategy": "Unit tests for cancel API integration and button state logic. Integration tests with ComfyUI interrupt endpoint. User testing for cancel button placement and feedback. Error scenario testing for network failures during cancellation.",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Cancel Button Component with Design System Integration",
            "description": "Build a reusable cancel button component following the established design system with proper styling and icon implementation",
            "dependencies": [],
            "details": "Create a new CancelButton component that uses the design system's red accent color (#ef4444) for the cancel action. Implement the button with a stop icon (using existing icon library or SVG). Include proper hover, active, and disabled states. Add support for loading state with spinner to show during cancellation process. Ensure the component is fully accessible with proper ARIA labels and keyboard navigation support.",
            "status": "pending",
            "testStrategy": "Unit tests for component rendering in different states (idle, active, loading, disabled). Visual regression tests for styling consistency. Accessibility tests for keyboard navigation and screen reader support."
          },
          {
            "id": 2,
            "title": "Implement ComfyUI Interrupt API Integration",
            "description": "Create service layer for interacting with ComfyUI's /interrupt endpoint to cancel active generations",
            "dependencies": [],
            "details": "Extend the existing ComfyUI API service to include an interrupt method that calls the /interrupt endpoint. Handle authentication if required by the ComfyUI server. Implement proper error handling for network failures, server errors, and edge cases like attempting to interrupt when no generation is active. Return appropriate response status to indicate success or failure of the interruption request.",
            "status": "pending",
            "testStrategy": "Unit tests for interrupt API method with mocked responses. Integration tests with actual ComfyUI /interrupt endpoint. Error scenario testing for various failure modes (network errors, 404s, server errors)."
          },
          {
            "id": 3,
            "title": "Implement Button State Management and Visibility Logic",
            "description": "Create state management logic to control cancel button visibility and enabled state based on generation status",
            "dependencies": [
              1,
              2
            ],
            "details": "Integrate the cancel button with the existing WebSocket connection to track generation state. Hide the button when no generation is active. Show and enable the button during active generation. Disable the button and show loading state when cancellation is in progress. Re-hide the button when generation completes or is successfully cancelled. Use the existing generation state management system to avoid duplicating state logic.",
            "status": "pending",
            "testStrategy": "Unit tests for state transitions and button visibility logic. Integration tests simulating various generation states via WebSocket events. Test rapid state changes and edge cases."
          },
          {
            "id": 4,
            "title": "Add Confirmation Dialog and User Feedback System",
            "description": "Implement a confirmation dialog for accidental cancellations and immediate feedback for user actions",
            "dependencies": [
              3
            ],
            "details": "Create a lightweight confirmation modal that appears when the cancel button is clicked, asking 'Are you sure you want to cancel the current generation?'. Include 'Cancel Generation' and 'Continue' buttons in the dialog. Implement immediate visual feedback when cancellation is initiated (button loading state, progress bar changes). Add success/error toast notifications to inform users of cancellation status. Ensure the dialog is keyboard accessible and can be dismissed with Escape key.",
            "status": "pending",
            "testStrategy": "Component tests for confirmation dialog behavior and keyboard interactions. E2E tests for complete cancellation flow including confirmation. User testing for dialog clarity and accidental click prevention."
          },
          {
            "id": 5,
            "title": "Position Cancel Button and Integrate with UI Layout",
            "description": "Integrate the cancel button into the existing UI layout near the progress indicator with proper responsive design",
            "dependencies": [
              4
            ],
            "details": "Position the cancel button prominently near the existing progress indicator component. Ensure the button appears in a logical location that's easily accessible during generation. Implement responsive design so the button remains properly positioned on different screen sizes. Coordinate with the progress bar animations to ensure smooth visual transitions. Update any existing layout components to accommodate the new button without breaking the current design flow.",
            "status": "pending",
            "testStrategy": "Visual regression tests for button positioning across different viewports. Integration tests ensuring button doesn't interfere with other UI elements. Cross-browser testing for consistent layout behavior."
          }
        ]
      },
      {
        "id": 14,
        "title": "Build Metadata Extraction and Display System",
        "description": "Create comprehensive metadata display panel showing generation parameters, timing, and workflow details",
        "details": "Build metadata parser for ComfyUI history responses. Extract generation parameters: steps, CFG, dimensions, prompt, negative prompt, model info, sampler settings, seed values. Calculate and display timing information: start time, duration, completion time. Create expandable/collapsible metadata panel with organized parameter grouping. Implement copy-to-clipboard functionality for metadata sharing. Style with dark theme and proper typography hierarchy.",
        "testStrategy": "Unit tests for metadata parsing from various ComfyUI response formats. Component tests for metadata display and organization. User testing for metadata readability and usefulness. Integration tests with different workflow types.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Create Advanced Sampler Selection Component",
        "description": "Implement dropdown component for selecting ComfyUI samplers with validation and workflow integration",
        "details": "Create styled dropdown component for sampler selection: DPM++ 2M, DPM++ SDE, DPM++ 2M Karras, DPM++ SDE Karras, Euler, Euler A, LMS, Heun, DPM2, DPM2 A, DDIM, PLMS, UniPC. Detect KSampler nodes in workflow JSON and auto-populate current values. Update workflow JSON when selection changes. Add tooltips explaining sampler characteristics and use cases. Group in 'Advanced Parameters' section with consistent styling.",
        "testStrategy": "Unit tests for sampler detection and workflow updating. Component tests for dropdown functionality and validation. Integration tests with workflow modification system. Manual testing with different workflow structures containing KSampler nodes.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Implement Scheduler Selection Component",
        "description": "Build scheduler dropdown with compatibility validation and workflow integration",
        "details": "Create scheduler dropdown component supporting: normal, karras, exponential, sgm_uniform, simple, ddim_uniform, beta. Implement sampler-scheduler compatibility validation to prevent invalid combinations. Auto-populate current scheduler from workflow JSON. Update workflow JSON when scheduler changes. Add explanatory tooltips for scheduler differences. Style consistently with sampler dropdown in Advanced Parameters section.",
        "testStrategy": "Unit tests for scheduler-sampler compatibility logic. Component tests for dropdown behavior and validation. Integration tests with workflow JSON modification. Cross-browser testing for dropdown styling and behavior.",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Build Comprehensive Seed Control System",
        "description": "Create seed input field with random generation, increment/decrement controls, and persistence",
        "details": "Create seed input component with validation (range: -1 to 2^32-1). Add random seed generator button creating cryptographically strong random numbers. Implement increment/decrement buttons for seed variations (+1/-1). Add special handling for -1 (random seed) vs fixed seeds with visual indicators. Integrate with localStorage for seed persistence across sessions. Auto-populate seed from workflow JSON and update workflow when changed.",
        "testStrategy": "Unit tests for seed validation, generation, and persistence. Component tests for input field behavior and button interactions. Integration tests with workflow modification and localStorage. Edge case testing for seed value limits and special values.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Integrate Advanced Parameters with Workflow Engine",
        "description": "Connect all advanced parameter controls to the existing workflow modification system",
        "details": "Create workflow modification service to update JSON with advanced parameters. Implement node detection and parameter injection for KSampler nodes. Handle multiple KSampler nodes in complex workflows. Add validation for parameter combinations and workflow compatibility. Integrate with existing workflow submission pipeline. Ensure parameter persistence across workflow loads and modifications.",
        "testStrategy": "Integration tests with various workflow JSON structures. Unit tests for node detection and parameter injection. E2E tests verifying parameters persist through generation pipeline. Validation testing for complex multi-node workflows.",
        "priority": "high",
        "dependencies": [
          15,
          16,
          17
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Create Advanced Parameters UI Section",
        "description": "Build organized UI section housing all advanced controls with consistent design system styling",
        "details": "Create collapsible 'Advanced Parameters' section with accordion-style expansion. Organize sampler, scheduler, and seed controls in logical groupings. Implement responsive layout for different screen sizes. Style with dark theme consistency and proper spacing. Add section state persistence in localStorage. Include help tooltips and parameter explanations. Ensure accessibility with proper ARIA labels and keyboard navigation.",
        "testStrategy": "Visual regression tests for section styling and responsive behavior. Accessibility testing with screen readers and keyboard navigation. User testing for parameter organization and discoverability. Cross-browser compatibility testing.",
        "priority": "medium",
        "dependencies": [
          15,
          16,
          17
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Implement Comprehensive Error Handling and State Management",
        "description": "Add robust error handling, loading states, and user feedback for all new Phase 2 features",
        "details": "Implement error boundaries for new feature components to prevent app crashes. Add comprehensive error handling for WebSocket failures, API errors, and invalid parameter states. Create loading states for all async operations. Implement user feedback system with toast notifications for errors and success states. Add graceful degradation when ComfyUI features are unavailable. Include retry mechanisms for transient failures and proper error recovery flows.",
        "testStrategy": "Error scenario testing for network failures, invalid parameters, and ComfyUI unavailability. Stress testing with rapid user interactions and state changes. Integration testing for error recovery flows. User testing for error message clarity and recovery guidance.",
        "priority": "high",
        "dependencies": [
          11,
          12,
          13,
          14,
          18
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-15T23:00:34.353Z",
      "updated": "2025-07-16T05:21:42.326Z",
      "description": "Tasks for master context"
    }
  }
}