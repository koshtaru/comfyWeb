# Task ID: 14
# Title: Build Metadata Extraction and Display System
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Create comprehensive metadata display panel showing generation parameters, timing, and workflow details
# Details:
Build metadata parser for ComfyUI history responses. Extract generation parameters: steps, CFG, dimensions, prompt, negative prompt, model info, sampler settings, seed values. Calculate and display timing information: start time, duration, completion time. Create expandable/collapsible metadata panel with organized parameter grouping. Implement copy-to-clipboard functionality for metadata sharing. Style with dark theme and proper typography hierarchy.

# Test Strategy:
Unit tests for metadata parsing from various ComfyUI response formats. Component tests for metadata display and organization. User testing for metadata readability and usefulness. Integration tests with different workflow types.

# Subtasks:
## 1. Create Metadata Parser Module [pending]
### Dependencies: None
### Description: Build a robust parser to extract metadata from ComfyUI history API responses
### Details:
Create a metadata parser module that handles various ComfyUI response formats. Parse workflow execution data to extract: prompt text, negative prompt, model name/hash, sampler type, scheduler, CFG scale, steps, seed values, image dimensions (width/height), batch size, clip skip, VAE settings. Handle nested JSON structures and optional fields gracefully. Create type definitions for metadata structure. Implement error handling for malformed or incomplete responses.

## 2. Implement Timing Information Calculator [pending]
### Dependencies: 14.1
### Description: Create functions to calculate and format generation timing data from ComfyUI responses
### Details:
Extract timestamp data from ComfyUI history responses including start time, end time, and node execution times. Calculate total generation duration in seconds/minutes. Format timestamps for display (e.g., '2 min 34 sec' or 'Started at 14:23:45'). Calculate per-step timing if available. Handle timezone conversions for accurate local time display. Create utility functions for consistent time formatting across the UI.

## 3. Design Metadata Display Component Structure [pending]
### Dependencies: 14.1, 14.2
### Description: Create React component architecture for the metadata panel with proper state management
### Details:
Design MetadataPanel component with collapsible/expandable sections. Create sub-components for parameter groups: Generation Settings (model, sampler, steps, CFG), Prompt Information (positive/negative with truncation), Image Properties (dimensions, batch size), Timing Data (start, duration, completion). Implement component state for expand/collapse functionality. Use React hooks for state management and memoization for performance. Structure components for reusability and maintainability.

## 4. Implement Dark Theme Styling and Layout [pending]
### Dependencies: 14.3
### Description: Apply consistent dark theme styling to metadata panel matching the design system
### Details:
Style metadata panel with dark theme colors: background #181825, borders #2A2A40, text hierarchy using #FFFFFF, #8B8B9A. Implement collapsible sections with smooth CSS transitions. Create organized layout with proper spacing: 16px padding, 8px between items. Style parameter labels with #8B8B9A and values with #FFFFFF. Add hover states for interactive elements. Implement responsive layout for mobile screens. Use CSS Grid or Flexbox for parameter organization. Add subtle shadows and rounded corners matching design system.

## 5. Add Copy-to-Clipboard and Integration Features [pending]
### Dependencies: 14.3, 14.4
### Description: Implement clipboard functionality and integrate metadata panel with existing UI
### Details:
Add copy buttons for individual parameters and full metadata export. Implement clipboard API with fallback for older browsers. Create formatted text output for sharing (JSON or readable text format). Show success feedback on copy actions. Integrate metadata panel into main UI layout, positioning below image display. Connect to WebSocket service to receive and display metadata for completed generations. Update panel automatically when new images are generated. Add loading states while fetching metadata.

